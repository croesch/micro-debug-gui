###################
# Copyright (C) 2011-2012  Christian Roesch
#
# This file is part of micro-debug-gui.
#
# micro-debug-gui is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# micro-debug-gui is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with micro-debug-gui.  If not, see <http://www.gnu.org/licenses/>.
###################

# the number of elements to hide, when printing the stack to the user
stack.elements.to.hide = 1

# default value for the register CPP
mic1.register.cpp.defval = 0x4000
# default value for the register H
mic1.register.h.defval   = 0x0
# default value for the register LV
mic1.register.lv.defval  = 0x8000
# default value for the register MAR
mic1.register.mar.defval = 0x0
# default value for the register MBR
mic1.register.mbr.defval = 0x0
# default value for the register MDR
mic1.register.mdr.defval = 0x0
# default value for the register OPC
mic1.register.opc.defval = 0x0
# default value for the register PC
mic1.register.pc.defval  = 0x-1
# default value for the register SP
mic1.register.sp.defval  = 0xC000
# default value for the register TOS
mic1.register.tos.defval = 0x0

# the width of a formatted address of the control store
mic1.mem.micro.addr.width   = 5
# the width of a formatted address of the memory
mic1.mem.macro.addr.width   = 8
# maximum size for the memory of Mic1
mic1.mem.macro.maxsize      = 0x10000

# the address of micro assembler code that reads the next ijvm instruction
mic1.micro.address.ijvm = 0x2

# the number of words displayed at once to the user
gui.memory.words.visible = 20

# setting if the view should be updated after each tick
# Be careful! Using true here might slow down the debugger 
gui.update.after.each.tick = false

# option to override the keystroke entries of the laf
# Use with care! If set to true some default keystrokes may not work
# if set to false, some configured keystrokes may not work
gui.override.laf.keystrokes = true

# the initial width of the main frame
gui.main.frame.width     = 1000
# the initial height of the main frame
gui.main.frame.height    = 618
# should the main frame be created maximized
gui.main.frame.maximized = true

# the position of the slider between register and memory
gui.main.frame.slider.register.memory     = 309
# the position of the slider between register, memory and the rest (code and textareas)
gui.main.frame.slider.registermemory.rest = 300
# the position of the slider between code and textareas
gui.main.frame.slider.code.textareas      = 400
# the position of the slider between textareas of processor and debugger
gui.main.frame.slider.processor.debugger  = 350
# the position of the slider between textarea for macro code and the one for micro code
gui.main.frame.slider.macro.micro         = 350

# keystroke to visualize the about frame
gui.keystroke.about      =
# keystroke to quit the program
gui.keystroke.exit       = ctrl Q
# keystroke to show the help frame
gui.keystroke.help       = F1
# keystroke to perform a micro step
gui.keystroke.micro.step = F5
# keystroke to reset the processor
gui.keystroke.reset      =
# keystroke to run the debugger
gui.keystroke.run        = F8
# keystroke to perform a macro step
gui.keystroke.step       = F6
# keystroke to interrupt the running processor
gui.keystroke.interrupt  =
